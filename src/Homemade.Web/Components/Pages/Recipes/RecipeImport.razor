@page "/recipes/import"
@rendermode InteractiveServer

<PageTitle>Import Recipe - Homemade</PageTitle>

<div class="min-h-screen bg-gradient-to-b from-primary-50 to-white">
    <div class="container mx-auto px-4 py-12">
        <div class="max-w-5xl mx-auto">
            <!-- Header -->
            <div class="mb-8">
                <a href="/recipes" class="inline-flex items-center text-neutral-600 hover:text-primary-600 mb-4 transition-colors">
                    <span class="mr-2">‚Üê</span> Back to recipes
                </a>
                <h1 class="text-4xl font-bold text-neutral-900 mb-2">Import Recipe</h1>
                <p class="text-lg text-neutral-600">Add recipes from the web or let AI find them for you</p>
            </div>

            @if (currentState == ImportState.Input)
            {
                <!-- Input Tabs -->
                <div class="bg-white rounded-2xl shadow-lg overflow-hidden">
                    <!-- Tab Headers -->
                    <div class="flex border-b border-neutral-200">
                        <button
                            class="flex-1 py-4 px-6 font-semibold transition-colors @(activeTab == ImportTab.Url ? "bg-primary-500 text-white" : "bg-neutral-100 text-neutral-700 hover:bg-neutral-200")"
                            @onclick="() => SwitchTab(ImportTab.Url)">
                            üìé Import from URL
                        </button>
                        <button
                            class="flex-1 py-4 px-6 font-semibold transition-colors @(activeTab == ImportTab.Search ? "bg-primary-500 text-white" : "bg-neutral-100 text-neutral-700 hover:bg-neutral-200")"
                            @onclick="() => SwitchTab(ImportTab.Search)">
                            üîç AI Recipe Search
                        </button>
                    </div>

                    <!-- Tab Content -->
                    <div class="p-8">
                        @if (activeTab == ImportTab.Url)
                        {
                            <!-- URL Import Tab -->
                            <div>
                                <label class="block text-sm font-semibold text-neutral-700 mb-2">
                                    Recipe URL
                                </label>
                                <div class="flex gap-3">
                                    <input
                                        type="url"
                                        placeholder="https://example.com/recipe"
                                        class="flex-1 px-4 py-3 text-lg border-2 border-neutral-200 rounded-xl focus:border-primary-500 focus:outline-none transition-colors"
                                        @bind="recipeUrl"
                                        @onkeypress="HandleUrlKeyPress"
                                    />
                                    <button
                                        class="px-8 py-3 bg-primary-500 text-white rounded-xl hover:bg-primary-600 transition-colors font-semibold disabled:bg-neutral-300 disabled:cursor-not-allowed"
                                        disabled="@string.IsNullOrWhiteSpace(recipeUrl)"
                                        @onclick="ImportFromUrl">
                                        Import
                                    </button>
                                </div>
                                <p class="mt-3 text-sm text-neutral-500">
                                    Try popular recipe sites: AllRecipes, Food Network, Bon App√©tit, NYT Cooking, etc.
                                </p>
                            </div>
                        }
                        else
                        {
                            <!-- AI Search Tab -->
                            <div>
                                <label class="block text-sm font-semibold text-neutral-700 mb-2">
                                    What are you looking for?
                                </label>
                                <textarea
                                    rows="4"
                                    placeholder="Describe the recipe you want... (e.g., 'quick weeknight chicken dinner' or 'authentic Italian carbonara')"
                                    class="w-full px-4 py-3 text-lg border-2 border-neutral-200 rounded-xl focus:border-primary-500 focus:outline-none transition-colors resize-none"
                                    @bind="searchQuery"
                                ></textarea>
                                <div class="flex justify-between items-center mt-4">
                                    <p class="text-sm text-neutral-500">
                                        AI will search online and find the best matching recipes
                                    </p>
                                    <button
                                        class="px-8 py-3 bg-primary-500 text-white rounded-xl hover:bg-primary-600 transition-colors font-semibold disabled:bg-neutral-300 disabled:cursor-not-allowed"
                                        disabled="@string.IsNullOrWhiteSpace(searchQuery)"
                                        @onclick="SearchRecipes">
                                        Search Recipes
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            else if (currentState == ImportState.Loading)
            {
                <!-- Loading State -->
                <div class="bg-white rounded-2xl shadow-lg p-16 text-center">
                    <div class="text-6xl mb-4">ü§ñ</div>
                    <h2 class="text-2xl font-semibold text-neutral-800 mb-2">@loadingMessage</h2>
                    <p class="text-neutral-600">This may take a few seconds...</p>
                    <div class="mt-6 flex justify-center">
                        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500"></div>
                    </div>
                </div>
            }
            else if (currentState == ImportState.SearchResults)
            {
                <!-- Search Results -->
                <div>
                    <div class="mb-6 flex justify-between items-center">
                        <h2 class="text-2xl font-bold text-neutral-800">Found @searchResults.Count Recipes</h2>
                        <button
                            class="px-4 py-2 bg-neutral-100 text-neutral-700 rounded-lg hover:bg-neutral-200 transition-colors"
                            @onclick="ResetToInput">
                            Try Another Search
                        </button>
                    </div>

                    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                        @foreach (var result in searchResults)
                        {
                            <div class="bg-white rounded-xl shadow overflow-hidden hover:shadow-lg transition-shadow">
                                <div class="h-40 bg-gradient-to-br from-primary-200 to-primary-300 flex items-center justify-center">
                                    <span class="text-5xl">@result.Icon</span>
                                </div>
                                <div class="p-5">
                                    <h3 class="text-lg font-semibold text-neutral-800 mb-1">@result.Name</h3>
                                    <p class="text-sm text-neutral-500 mb-3">@result.Source</p>
                                    <p class="text-sm text-neutral-600 mb-4 line-clamp-2">@result.Description</p>
                                    <div class="flex items-center text-sm text-neutral-600 mb-4">
                                        <span class="mr-3">‚è±Ô∏è @result.TotalTime min</span>
                                        <span>üë• @result.Servings</span>
                                    </div>
                                    <button
                                        class="w-full py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors font-semibold"
                                        @onclick="() => SelectSearchResult(result)">
                                        Import This Recipe
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            else if (currentState == ImportState.Preview)
            {
                <!-- Preview & Edit -->
                <div>
                    <div class="mb-6 flex justify-between items-center">
                        <h2 class="text-2xl font-bold text-neutral-800">Review & Edit Recipe</h2>
                        <div class="flex gap-3">
                            <button
                                class="px-4 py-2 bg-neutral-100 text-neutral-700 rounded-lg hover:bg-neutral-200 transition-colors"
                                @onclick="ResetToInput">
                                Cancel
                            </button>
                            <button
                                class="px-4 py-2 bg-accent-500 text-white rounded-lg hover:bg-accent-600 transition-colors"
                                @onclick="RegenerateWithAI">
                                üîÑ Regenerate
                            </button>
                        </div>
                    </div>

                    <div class="bg-white rounded-2xl shadow-lg overflow-hidden mb-6">
                        <!-- Recipe Header -->
                        <div class="p-8 border-b border-neutral-200">
                            <div class="flex gap-6 mb-6">
                                <!-- Emoji Icon Selector -->
                                <div>
                                    <label class="block text-sm font-semibold text-neutral-700 mb-2">Icon</label>
                                    <div class="w-24 h-24 bg-gradient-to-br from-primary-200 to-primary-300 rounded-xl flex items-center justify-center text-5xl cursor-pointer hover:scale-105 transition-transform"
                                         @onclick="OpenEmojiPicker">
                                        @currentRecipe.Icon
                                    </div>
                                </div>

                                <!-- Recipe Name -->
                                <div class="flex-1">
                                    <label class="block text-sm font-semibold text-neutral-700 mb-2">Recipe Name</label>
                                    <input
                                        type="text"
                                        class="w-full px-4 py-3 text-2xl font-bold border-2 border-neutral-200 rounded-xl focus:border-primary-500 focus:outline-none transition-colors"
                                        @bind="currentRecipe.Name"
                                    />
                                </div>
                            </div>

                            <!-- Description -->
                            <div class="mb-6">
                                <label class="block text-sm font-semibold text-neutral-700 mb-2">Description</label>
                                <textarea
                                    rows="3"
                                    class="w-full px-4 py-3 border-2 border-neutral-200 rounded-xl focus:border-primary-500 focus:outline-none transition-colors resize-none"
                                    @bind="currentRecipe.Description"
                                ></textarea>
                            </div>

                            <!-- Metadata Row -->
                            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                                <div>
                                    <label class="block text-xs font-semibold text-neutral-700 mb-2">Prep Time (min)</label>
                                    <input
                                        type="number"
                                        class="w-full px-3 py-2 border-2 border-neutral-200 rounded-lg focus:border-primary-500 focus:outline-none transition-colors"
                                        @bind="currentRecipe.PrepTime"
                                    />
                                </div>
                                <div>
                                    <label class="block text-xs font-semibold text-neutral-700 mb-2">Cook Time (min)</label>
                                    <input
                                        type="number"
                                        class="w-full px-3 py-2 border-2 border-neutral-200 rounded-lg focus:border-primary-500 focus:outline-none transition-colors"
                                        @bind="currentRecipe.CookTime"
                                    />
                                </div>
                                <div>
                                    <label class="block text-xs font-semibold text-neutral-700 mb-2">Servings</label>
                                    <input
                                        type="number"
                                        class="w-full px-3 py-2 border-2 border-neutral-200 rounded-lg focus:border-primary-500 focus:outline-none transition-colors"
                                        @bind="currentRecipe.Servings"
                                    />
                                </div>
                                <div>
                                    <label class="block text-xs font-semibold text-neutral-700 mb-2">Difficulty</label>
                                    <select
                                        class="w-full px-3 py-2 border-2 border-neutral-200 rounded-lg focus:border-primary-500 focus:outline-none transition-colors"
                                        @bind="currentRecipe.Difficulty">
                                        <option value="Easy">Easy</option>
                                        <option value="Medium">Medium</option>
                                        <option value="Hard">Hard</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Tags -->
                            <div>
                                <label class="block text-sm font-semibold text-neutral-700 mb-2">Tags</label>
                                <div class="flex flex-wrap gap-2 mb-3">
                                    @foreach (var tag in currentRecipe.Tags)
                                    {
                                        <span class="inline-flex items-center px-3 py-1 bg-accent-100 text-accent-700 rounded-full text-sm font-medium">
                                            @tag
                                            <button
                                                class="ml-2 text-accent-600 hover:text-accent-800 font-bold"
                                                @onclick="() => RemoveTag(tag)">
                                                √ó
                                            </button>
                                        </span>
                                    }
                                </div>
                                <div class="flex gap-2">
                                    <input
                                        type="text"
                                        placeholder="Add a tag..."
                                        class="flex-1 px-3 py-2 border-2 border-neutral-200 rounded-lg focus:border-primary-500 focus:outline-none transition-colors"
                                        @bind="newTag"
                                        @onkeypress="HandleTagKeyPress"
                                    />
                                    <button
                                        class="px-4 py-2 bg-neutral-100 text-neutral-700 rounded-lg hover:bg-neutral-200 transition-colors"
                                        @onclick="AddTag">
                                        Add
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Collapsible Original Source -->
                        @if (!string.IsNullOrWhiteSpace(originalSource))
                        {
                            <div class="border-b border-neutral-200">
                                <button
                                    class="w-full px-8 py-4 flex justify-between items-center text-left hover:bg-neutral-50 transition-colors"
                                    @onclick="ToggleOriginalSource">
                                    <span class="font-semibold text-neutral-700">
                                        @(showOriginalSource ? "Hide" : "View") Original Source
                                    </span>
                                    <span class="text-neutral-400">@(showOriginalSource ? "‚ñº" : "‚ñ∂")</span>
                                </button>
                                @if (showOriginalSource)
                                {
                                    <div class="px-8 pb-6">
                                        <div class="p-4 bg-neutral-50 rounded-lg overflow-auto max-h-96">
                                            <pre class="text-sm text-neutral-700 whitespace-pre-wrap">@originalSource</pre>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    <!-- Two Column Layout for Ingredients & Instructions -->
                    <div class="grid md:grid-cols-2 gap-6">
                        <!-- Ingredients -->
                        <div class="bg-white rounded-xl shadow p-6">
                            <h3 class="text-xl font-bold text-neutral-800 mb-4">Ingredients</h3>
                            <div class="space-y-2 mb-4">
                                @for (int i = 0; i < currentRecipe.Ingredients.Count; i++)
                                {
                                    var index = i;
                                    <div class="flex gap-2 items-center">
                                        <span class="text-neutral-400 cursor-move">‚ãÆ‚ãÆ</span>
                                        <input
                                            type="text"
                                            class="flex-1 px-3 py-2 border-2 border-neutral-200 rounded-lg focus:border-primary-500 focus:outline-none transition-colors"
                                            @bind="currentRecipe.Ingredients[index]"
                                        />
                                        <button
                                            class="px-3 py-2 text-error-600 hover:bg-error-50 rounded-lg transition-colors"
                                            @onclick="() => RemoveIngredient(index)">
                                            √ó
                                        </button>
                                    </div>
                                }
                            </div>
                            <button
                                class="w-full py-2 border-2 border-dashed border-neutral-300 text-neutral-600 rounded-lg hover:border-primary-500 hover:text-primary-600 transition-colors"
                                @onclick="AddIngredient">
                                + Add Ingredient
                            </button>
                        </div>

                        <!-- Instructions -->
                        <div class="bg-white rounded-xl shadow p-6">
                            <h3 class="text-xl font-bold text-neutral-800 mb-4">Instructions</h3>
                            <div class="space-y-3 mb-4">
                                @for (int i = 0; i < currentRecipe.Instructions.Count; i++)
                                {
                                    var index = i;
                                    <div class="flex gap-2">
                                        <div class="flex flex-col items-center gap-1">
                                            <span class="text-neutral-400 cursor-move">‚ãÆ‚ãÆ</span>
                                            <span class="w-6 h-6 rounded-full bg-primary-500 text-white text-xs flex items-center justify-center font-bold">
                                                @(index + 1)
                                            </span>
                                        </div>
                                        <textarea
                                            rows="3"
                                            class="flex-1 px-3 py-2 border-2 border-neutral-200 rounded-lg focus:border-primary-500 focus:outline-none transition-colors resize-none"
                                            @bind="currentRecipe.Instructions[index]"
                                        ></textarea>
                                        <button
                                            class="px-3 py-2 text-error-600 hover:bg-error-50 rounded-lg transition-colors self-start"
                                            @onclick="() => RemoveInstruction(index)">
                                            √ó
                                        </button>
                                    </div>
                                }
                            </div>
                            <button
                                class="w-full py-2 border-2 border-dashed border-neutral-300 text-neutral-600 rounded-lg hover:border-primary-500 hover:text-primary-600 transition-colors"
                                @onclick="AddInstruction">
                                + Add Step
                            </button>
                        </div>
                    </div>

                    <!-- Save Button -->
                    <div class="mt-8 flex justify-center">
                        <button
                            class="px-12 py-4 bg-primary-500 text-white text-lg font-semibold rounded-xl hover:bg-primary-600 transition-colors disabled:bg-neutral-300 disabled:cursor-not-allowed"
                            disabled="@(!IsRecipeValid())"
                            @onclick="SaveRecipe">
                            Save Recipe
                        </button>
                    </div>

                    @if (!IsRecipeValid())
                    {
                        <div class="mt-4 p-4 bg-warning-50 border-l-4 border-warning-500 rounded text-center">
                            <p class="text-warning-700">Please fill in all required fields (name, at least one ingredient, and at least one instruction step)</p>
                        </div>
                    }
                </div>
            }
            else if (currentState == ImportState.Success)
            {
                <!-- Success State -->
                <div class="bg-white rounded-2xl shadow-lg p-16 text-center">
                    <div class="text-6xl mb-4">‚úÖ</div>
                    <h2 class="text-3xl font-bold text-neutral-800 mb-3">Recipe Saved Successfully!</h2>
                    <p class="text-lg text-neutral-600 mb-8">@currentRecipe.Name has been added to your collection</p>
                    <div class="flex gap-4 justify-center">
                        <a href="/recipes/@savedRecipeId" class="px-6 py-3 bg-primary-500 text-white rounded-xl hover:bg-primary-600 transition-colors font-semibold">
                            View Recipe
                        </a>
                        <button
                            class="px-6 py-3 bg-neutral-100 text-neutral-700 rounded-xl hover:bg-neutral-200 transition-colors font-semibold"
                            @onclick="ResetToInput">
                            Import Another
                        </button>
                        <a href="/my-recipes" class="px-6 py-3 bg-neutral-100 text-neutral-700 rounded-xl hover:bg-neutral-200 transition-colors font-semibold">
                            Go to My Recipes
                        </a>
                    </div>
                </div>
            }
            else if (currentState == ImportState.Error)
            {
                <!-- Error State -->
                <div class="bg-white rounded-2xl shadow-lg p-16 text-center">
                    <div class="text-6xl mb-4">‚ö†Ô∏è</div>
                    <h2 class="text-2xl font-bold text-neutral-800 mb-3">Something Went Wrong</h2>
                    <p class="text-lg text-neutral-600 mb-8">@errorMessage</p>
                    <div class="flex gap-4 justify-center">
                        <button
                            class="px-6 py-3 bg-primary-500 text-white rounded-xl hover:bg-primary-600 transition-colors font-semibold"
                            @onclick="RetryImport">
                            Try Again
                        </button>
                        <button
                            class="px-6 py-3 bg-neutral-100 text-neutral-700 rounded-xl hover:bg-neutral-200 transition-colors font-semibold"
                            @onclick="ResetToInput">
                            Start Over
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private enum ImportState { Input, Loading, SearchResults, Preview, Success, Error }
    private enum ImportTab { Url, Search }

    private ImportState currentState = ImportState.Input;
    private ImportTab activeTab = ImportTab.Url;

    private string recipeUrl = "";
    private string searchQuery = "";
    private string loadingMessage = "";
    private string errorMessage = "";
    private string originalSource = "";
    private string newTag = "";
    private bool showOriginalSource = false;
    private int savedRecipeId = 0;

    private List<RecipeSearchResult> searchResults = new();
    private RecipeImportData currentRecipe = new();

    private void SwitchTab(ImportTab tab)
    {
        activeTab = tab;
    }

    private async Task HandleUrlKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(recipeUrl))
        {
            await ImportFromUrl();
        }
    }

    private async Task ImportFromUrl()
    {
        currentState = ImportState.Loading;
        loadingMessage = "Importing recipe from URL...";

        // TODO: Call AI service to fetch and parse recipe from URL
        await Task.Delay(2000); // Simulate API call

        // Mock parsed recipe
        MockImportedRecipe();
        currentState = ImportState.Preview;
    }

    private async Task SearchRecipes()
    {
        currentState = ImportState.Loading;
        loadingMessage = "Searching for recipes...";

        // TODO: Call AI service to search for recipes
        await Task.Delay(2000); // Simulate API call

        // Mock search results
        MockSearchResults();
        currentState = ImportState.SearchResults;
    }

    private async Task SelectSearchResult(RecipeSearchResult result)
    {
        currentState = ImportState.Loading;
        loadingMessage = "Parsing recipe...";

        // TODO: Fetch and parse the selected recipe
        await Task.Delay(1500);
        
        MockImportedRecipe(result.Name);
        currentState = ImportState.Preview;
        StateHasChanged();
    }

    private void MockSearchResults()
    {
        searchResults = new List<RecipeSearchResult>
        {
            new() { Name = "Quick Chicken Pasta", Icon = "üçù", Source = "allrecipes.com", Description = "A fast and easy weeknight dinner", TotalTime = 30, Servings = 4 },
            new() { Name = "Creamy Garlic Chicken", Icon = "üçó", Source = "foodnetwork.com", Description = "Tender chicken in creamy garlic sauce", TotalTime = 35, Servings = 4 },
            new() { Name = "Lemon Herb Chicken", Icon = "üçã", Source = "bonappetit.com", Description = "Fresh and flavorful chicken dish", TotalTime = 40, Servings = 6 },
            new() { Name = "One-Pot Chicken Rice", Icon = "üçö", Source = "tasty.co", Description = "Easy one-pot meal with minimal cleanup", TotalTime = 45, Servings = 4 }
        };
    }

    private void MockImportedRecipe(string? name = null)
    {
        currentRecipe = new RecipeImportData
        {
            Name = name ?? "Classic Chicken Pasta",
            Icon = "üçù",
            Description = "A creamy and delicious pasta dish with tender chicken",
            PrepTime = 15,
            CookTime = 30,
            Servings = 4,
            Difficulty = "Easy",
            Tags = new List<string> { "Italian", "Pasta", "Chicken", "Quick & Easy" },
            Ingredients = new List<string>
            {
                "400g pasta",
                "500g chicken breast",
                "2 cups heavy cream",
                "1 cup parmesan cheese",
                "3 cloves garlic"
            },
            Instructions = new List<string>
            {
                "Cook pasta according to package directions",
                "Season and cook chicken until golden",
                "Make cream sauce with garlic and parmesan",
                "Combine everything and serve hot"
            }
        };
        originalSource = "Sample original recipe text from website...";
    }

    private void ToggleOriginalSource()
    {
        showOriginalSource = !showOriginalSource;
    }

    private void AddTag()
    {
        if (!string.IsNullOrWhiteSpace(newTag) && !currentRecipe.Tags.Contains(newTag))
        {
            currentRecipe.Tags.Add(newTag);
            newTag = "";
        }
    }

    private void RemoveTag(string tag)
    {
        currentRecipe.Tags.Remove(tag);
    }

    private void HandleTagKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddTag();
        }
    }

    private void AddIngredient()
    {
        currentRecipe.Ingredients.Add("");
    }

    private void RemoveIngredient(int index)
    {
        currentRecipe.Ingredients.RemoveAt(index);
    }

    private void AddInstruction()
    {
        currentRecipe.Instructions.Add("");
    }

    private void RemoveInstruction(int index)
    {
        currentRecipe.Instructions.RemoveAt(index);
    }

    private void OpenEmojiPicker()
    {
        // TODO: Implement emoji picker
        // For now, cycle through some common food emojis
        var emojis = new[] { "üçù", "üçï", "üçî", "üçó", "ü•ó", "üç≤", "ü•ò", "üç±", "üçõ", "üçú" };
        var currentIndex = Array.IndexOf(emojis, currentRecipe.Icon);
        currentRecipe.Icon = emojis[(currentIndex + 1) % emojis.Length];
    }

    private bool IsRecipeValid()
    {
        return !string.IsNullOrWhiteSpace(currentRecipe.Name) &&
               currentRecipe.Ingredients.Any(i => !string.IsNullOrWhiteSpace(i)) &&
               currentRecipe.Instructions.Any(i => !string.IsNullOrWhiteSpace(i));
    }

    private async Task RegenerateWithAI()
    {
        currentState = ImportState.Loading;
        loadingMessage = "Regenerating with AI...";

        // TODO: Re-parse with AI
        await Task.Delay(1500);

        currentState = ImportState.Preview;
    }

    private async Task SaveRecipe()
    {
        if (!IsRecipeValid()) return;

        currentState = ImportState.Loading;
        loadingMessage = "Saving recipe...";

        // TODO: Save to database
        await Task.Delay(1000);

        savedRecipeId = 1; // Mock ID
        currentState = ImportState.Success;
    }

    private async Task RetryImport()
    {
        if (activeTab == ImportTab.Url)
        {
            await ImportFromUrl();
        }
        else
        {
            await SearchRecipes();
        }
    }

    private void ResetToInput()
    {
        currentState = ImportState.Input;
        recipeUrl = "";
        searchQuery = "";
        searchResults.Clear();
        currentRecipe = new();
        originalSource = "";
        showOriginalSource = false;
    }

    private class RecipeSearchResult
    {
        public string Name { get; set; } = "";
        public string Icon { get; set; } = "";
        public string Source { get; set; } = "";
        public string Description { get; set; } = "";
        public int TotalTime { get; set; }
        public int Servings { get; set; }
    }

    private class RecipeImportData
    {
        public string Name { get; set; } = "";
        public string Icon { get; set; } = "üçΩÔ∏è";
        public string Description { get; set; } = "";
        public int PrepTime { get; set; }
        public int CookTime { get; set; }
        public int Servings { get; set; }
        public string Difficulty { get; set; } = "Easy";
        public List<string> Tags { get; set; } = new();
        public List<string> Ingredients { get; set; } = new();
        public List<string> Instructions { get; set; } = new();
    }
}
