@rendermode InteractiveServer
@using Grpc.Core
@using Homemade.AI
@inject RecipeAI.RecipeAIClient GrpcClient
@inject ILogger<ChatWidget> Logger
@implements IAsyncDisposable

<div class="fixed bottom-4 right-4 z-50">
    @if (!isOpen)
    {
        <!-- Chat toggle button -->
        <button @onclick="ToggleChat"
                class="bg-orange-600 hover:bg-orange-700 text-white rounded-full p-4 shadow-lg transition-all duration-200 flex items-center gap-2">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
            </svg>
            <span class="font-medium">Chat with Recipe Assistant</span>
        </button>
    }
    else
    {
        <!-- Chat window -->
        <div class="bg-white rounded-lg shadow-2xl w-96 h-[32rem] flex flex-col">
            <!-- Header -->
            <div class="bg-orange-600 text-white p-4 rounded-t-lg flex items-center justify-between">
                <div class="flex items-center gap-2">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                    </svg>
                    <h3 class="font-semibold">Recipe Assistant</h3>
                </div>
                <button @onclick="ToggleChat" class="hover:bg-orange-700 rounded p-1">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <!-- Messages area -->
            <div class="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50" @ref="messagesContainer">
                @if (messages.Count == 0)
                {
                    <div class="text-center text-gray-500 mt-8">
                        <p class="text-sm">üëã Hi! I'm your recipe assistant.</p>
                        <p class="text-sm mt-2">Ask me about cooking techniques, ingredient substitutions, or recipe suggestions!</p>
                    </div>
                }
                @foreach (var message in messages)
                {
                    <div class="@(message.IsUser ? "flex justify-end" : "flex justify-start")">
                        <div class="@(message.IsUser ? "bg-orange-600 text-white" : "bg-white text-gray-800") rounded-lg px-4 py-2 max-w-[80%] shadow">
                            <p class="text-sm whitespace-pre-wrap">@message.Content</p>
                            <span class="text-xs opacity-75 mt-1 block">@message.Timestamp.ToString("HH:mm")</span>
                        </div>
                    </div>
                }
                @if (isStreaming)
                {
                    <div class="flex justify-start">
                        <div class="bg-white text-gray-800 rounded-lg px-4 py-2 max-w-[80%] shadow">
                            <p class="text-sm whitespace-pre-wrap">@currentStreamingMessage</p>
                            <div class="flex gap-1 mt-2">
                                <div class="w-2 h-2 bg-orange-600 rounded-full animate-bounce"></div>
                                <div class="w-2 h-2 bg-orange-600 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
                                <div class="w-2 h-2 bg-orange-600 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Input area -->
            <div class="p-4 border-t bg-white rounded-b-lg">
                <form @onsubmit="SendMessage" class="flex gap-2">
                    <input @bind="currentMessage"
                           @bind:event="oninput"
                           type="text"
                           placeholder="Type your message..."
                           disabled="@isStreaming"
                           class="flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500 disabled:bg-gray-100" />
                    <button type="submit"
                            disabled="@(string.IsNullOrWhiteSpace(currentMessage) || isStreaming)"
                            class="bg-orange-600 hover:bg-orange-700 disabled:bg-gray-300 disabled:cursor-not-allowed text-white rounded-lg px-4 py-2 transition-colors">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                        </svg>
                    </button>
                </form>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? Context { get; set; }

    private bool isOpen = false;
    private bool isStreaming = false;
    private string currentMessage = string.Empty;
    private string currentStreamingMessage = string.Empty;
    private List<ChatMessageModel> messages = new();
    private ElementReference messagesContainer;
    private AsyncServerStreamingCall<ChatResponse>? streamCall;

    private class ChatMessageModel
    {
        public required string Content { get; init; }
        public required bool IsUser { get; init; }
        public required DateTime Timestamp { get; init; }
    }

    private void ToggleChat()
    {
        isOpen = !isOpen;
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage))
            return;

        var userMessage = currentMessage.Trim();
        currentMessage = string.Empty;

        // Add user message to chat
        messages.Add(new ChatMessageModel
        {
            Content = userMessage,
            IsUser = true,
            Timestamp = DateTime.Now
        });

        // Start streaming response
        isStreaming = true;
        currentStreamingMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Build chat history for the request
            var history = messages
                .Where(m => m != messages.Last()) // Exclude the message we just added
                .Select(m => new ChatMessage
                {
                    Role = m.IsUser ? "user" : "assistant",
                    Content = m.Content,
                    Timestamp = new DateTimeOffset(m.Timestamp).ToUnixTimeSeconds()
                })
                .ToList();

            var request = new ChatRequest
            {
                Message = userMessage,
                Context = Context
            };
            request.History.AddRange(history);

            // Call gRPC streaming endpoint
            streamCall = GrpcClient.Chat(request);

            await foreach (var response in streamCall.ResponseStream.ReadAllAsync())
            {
                if (!response.IsComplete && !string.IsNullOrEmpty(response.Content))
                {
                    currentStreamingMessage += response.Content;
                    StateHasChanged();
                }
                else if (response.IsComplete)
                {
                    // Add complete assistant message
                    if (!string.IsNullOrEmpty(currentStreamingMessage))
                    {
                        messages.Add(new ChatMessageModel
                        {
                            Content = currentStreamingMessage,
                            IsUser = false,
                            Timestamp = DateTime.Now
                        });
                    }
                    currentStreamingMessage = string.Empty;
                    break;
                }
            }
        }
        catch (Exception exception)
        {
            Logger.LogError(exception, "An error occurred while streaming chat messages:");

            // Add error message
            messages.Add(new ChatMessageModel
            {
                Content = $"‚ùå Sorry, I encountered an error: {exception.Message}",
                IsUser = false,
                Timestamp = DateTime.Now
            });
        }
        finally
        {
            isStreaming = false;
            StateHasChanged();
        }
    }

    public ValueTask DisposeAsync()
    {
        streamCall?.Dispose();
        return ValueTask.CompletedTask;
    }
}
